#################### COMPILE OPTIONS #######################


# Uncomment this for fixed-point build
FIXED_POINT=1

# It is strongly recommended to uncomment one of these
# VAR_ARRAYS: Use C99 variable-length arrays for stack allocation
# USE_AllLLOCA: Use alloca() for stack allocation
# If none is defined, then the fallback is a non-threadsafe global array
OPUS_CFLAGS := -DUSE_ALLOCA $(OPUS_CFLAGS)

#OPUS_CFLAGS := -DVAR_ARRAYS $(OPUS_CFLAGS)

#OPUS_CFLAGS := -DVAR_ARRAYS $(OPUS_CFLAGS)

# These options affect performance
# HAVE_LRINTF: Use C99 intrinsics to speed up float-to-int conversion
#OPUS_CFLAGS := -DHAVE_LRINTF $(OPUS_CFLAGS)

###################### END OF OPTIONS ######################
-include config.mk

ifndef 3rdparty_path
CURR_DIR = .
else
CURR_DIR = $(3rdparty_path)/opus
endif
BUILDDIR= $(CURR_DIR)/Out
OBJDIR = $(CURR_DIR)/Obj
MAKEDIR = $(CURR_DIR)
ROOTDIR = $(CURR_DIR)

#OPUS_TARGET_CPU = $(opus_cpu)
OPUS_SOC     = $(opus_soc)
OPUS_BOARD = $(opus_board)

export TARGET_CPU SOC

OPUS_LINKFILE = $(ROOTDIR)/gcc_csky.ld
OPUS_LINKDIR  = $(ROOTDIR)/csi/csi_driver/$(soc)


-include $(ROOTDIR)/package_version

include $(ROOTDIR)/silk_sources.mk
include $(ROOTDIR)/celt_sources.mk
include $(ROOTDIR)/opus_sources.mk

ifdef FIXED_POINT
#SILK_SOURCES += $(ROOTDIR)/$(SILK_SOURCES_FIXED)
else
SILK_SOURCES += $(ROOTDIR)/$(SILK_SOURCES_FLOAT)
OPUS_SOURCES += $(ROOTDIR)/$(OPUS_SOURCES_FLOAT)
endif
# csky file



OPUS_CSRC =   $(MAKEDIR)/*.c
OPUS_SSRC =    $(ROOTDIR)/*.S
#OPUS_SSRC =
OPUS_SSRCFILE = $(wildcard $(OPUS_SSRC))
OPUS_CSRCFILE = $(wildcard $(OPUS_CSRC))

OPUS_EXESUFFIX =
OPUS_LIBPREFIX = lib
OPUS_LIBSUFFIX = .a
OPUS_OBJSUFFIX = .o

cppflags-from-defines   = $(addprefix -D,$(1))
cppflags-from-includes  = $(addprefix -I,$(1))
ldflags-from-ldlibdirs  = $(addprefix -L,$(1))
ldlibs-from-libs        = $(addprefix -l,$(1))

#OPUS_WARNINGS = -Wall -W -Wstrict-prototypes -Wextra -Wcast-align -Wnested-externs -Wshadow

# csky flags
OPUS_CFLAGS  += -std=gnu99 -O2 $(OPUS_WARNINGS) -DENABLE_ASSERTIONS -DOPUS_BUILD \
		   -DOPUS_CSKY_INLINE_ASM -DOVERRIDE_silk_warped_autocorrelation_FIX
OPUS_CFLAGS +=   -mlittle-endian -mno-multiple-stld -DUSE_DEFAULT_STDLIB -g
OPUS_CFLAGS += -Wall
OPUS_CFLAGS += -fno-strict-aliasing -fomit-frame-pointer -I./
OPUS_CFLAGS += -frename-registers -mhigh-registers
OPUS_CFLAGS += -mistack

OPUS_LDFLAGS += $(OPUS_CFLAGS)

OPUS_CINCLUDES = $(ROOTDIR)/include $(ROOTDIR)/silk $(ROOTDIR)/celt
OPUS_CINCLUDES += $(ROOTDIR)/

ifdef FIXED_POINT
OPUS_CFLAGS += -DFIXED_POINT=1 -DDISABLE_FLOAT_API
OPUS_CINCLUDES += $(ROOTDIR)/silk/fixed
else
OPUS_CINCLUDES += $(ROOTDIR)/silk/float
endif

# csky files

OPUS_LIBS = m  opus

OPUS_LDLIBDIRS = $(ROOTDIR)

OPUS_CFLAGS  += $(call cppflags-from-defines,$(OPUS_CDEFINES))
OPUS_CFLAGS  += $(call cppflags-from-includes,$(OPUS_CINCLUDES))
OPUS_LDFLAGS += $(call ldflags-from-ldlibdirs,$(OPUS_LDLIBDIRS))
OPUS_LDLIBS  += $(call ldlibs-from-libs,$(OPUS_LIBS))

OPUS_ARCHS = -I$(ROOTDIR) -nostartfiles  -Wl,-T$(LINKDIR)/$(LINKFILE)
COMPILE.c.cmdline   = $(CC) -c $(OPUS_CFLAGS) -o $@ $<
LINK.o              = $(CC) $(LDPREFLAGS) $(OPUS_LDFLAGS)
LINK.o.cmdline      = $(LINK.o) $^ $(OPUS_LDLIBS) $(OPUS_ARCHS) -o $@$(OPUS_EXESUFFIX) -Wl,-gc-sections 

ARCHIVE.cmdline     = $(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@

%$(OPUS_OBJSUFFIX):%.c
	$(COMPILE.c.cmdline)

%$(OPUS_OBJSUFFIX):%.cpp
	$(COMPILE.cpp.cmdline)

%$(OPUS_OBJSUFFIX):%.S
	@echo AS $<
	$(COMPILE.c.cmdline)

OPUS_COBJECTS := $(patsubst %.c,%$(OPUS_OBJSUFFIX),$(OPUS_CSRCFILE))  $(patsubst %.S,%$(OPUS_OBJSUFFIX),$(OPUS_SSRCFILE)) 

# Directives


# Variable definitions
LIB_NAME = opus
OPUS_TARGET = $(OPUS_LIBPREFIX)$(LIB_NAME)$(OPUS_LIBSUFFIX)

OPUS_SRCS_C = $(SILK_SOURCES) $(CELT_SOURCES) $(OPUS_SOURCES)

opus_objs := $(patsubst %.c,%$(OPUS_OBJSUFFIX),$(OPUS_SRCS_C))
opus_objs += $(patsubst %.S,%$(OPUS_OBJSUFFIX),$(OPUS_SSRCFILE))
DOBJECTS := $(patsubst %$(OPUS_OBJSUFFIX), %.d,$(opus_objs))
#$(info $(DOBJECTS))
# Rules
$(OPUS_TARGET): $(opus_objs)
	$(ARCHIVE.cmdline)


debug:
	echo $(COBJECTS)
	echo $(OPUS_CSRC)

# add opusenc

celt/celt.o: OPUS_CFLAGS += -DPACKAGE_VERSION='$(PACKAGE_VERSION)'
celt/celt.o: package_version

opusclean:
	-rm -f $(OPUS_TARGET) $(opus_objs) $(DOBJECTS)

.PHONY: $(OPUS_TARGET) debug opusclean
